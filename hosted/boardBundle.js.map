{"version":3,"sources":["board.js","helper.js"],"names":["normalizeColHeights","$","height","Math","max","handleBoardItem","e","preventDefault","fadeOut","val","handleError","sendAjax","attr","serialize","loadBoardItemsFromServer","deleteBoardItem","boardItemID","handleDragStart","itemID","dataTransfer","setData","handleDrop","status","getData","BoardItemForm","props","csrf","ShareButton","shareable","BoardList","toDo","length","inProgress","complete","toDoNodes","map","item","_id","name","description","inProgressNodes","completeNodes","data","toDoArray","inProgressArray","completeArray","i","boardItems","push","ReactDOM","render","document","querySelector","setup","click","getToken","result","csrfToken","ready","message","text","fadeIn","redirect","response","window","location","type","action","success","ajax","cache","url","dataType","error","xhr","messageObj","JSON","parse","responseText"],"mappings":"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","file":"boardBundle.js","sourcesContent":["// Keeps the height of the different status columns consistent\r\nconst normalizeColHeights = () => {\r\n    $(\"#toDo\").height('auto');\r\n    $(\"#inProgress\").height('auto');\r\n    $(\"#complete\").height('auto');\r\n    let height = Math.max($(\"#toDo\").height(), $(\"#inProgress\").height(), $(\"#complete\").height());\r\n    $(\"#toDo\").height(height);\r\n    $(\"#inProgress\").height(height);\r\n    $(\"#complete\").height(height);\r\n}\r\n\r\n// Creates a new board item\r\nconst handleBoardItem = (e) => {\r\n    e.preventDefault();\r\n\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if($(\"#boardItemName\").val() == '' || $(\"#boardItemDescription\").val() == ''){\r\n        handleError(\"Item name and description required\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', $(\"#boardItemForm\").attr(\"action\"), $(\"#boardItemForm\").serialize(), function() {\r\n        loadBoardItemsFromServer();\r\n    });\r\n\r\n    return false;\r\n};\r\n\r\n// Deletes the given board item\r\nconst deleteBoardItem = (e, boardItemID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if($(\"#boardItemID\").val() == ''){\r\n        handleError(\"Board Item does not exist\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/deleteBoardItem\", `${$(\"#clientCSRF\").serialize()}&itemID=${boardItemID}`, function() {\r\n        loadBoardItemsFromServer();\r\n    });\r\n\r\n    return false;\r\n};\r\n\r\n// Handles dragging an item\r\nconst handleDragStart = (e, itemID) => {\r\n    e.dataTransfer.setData('text', itemID);\r\n    return false;\r\n};\r\n\r\n// Handles dropping an item into a new status\r\nconst handleDrop = (e, status) => {\r\n    let itemID = e.dataTransfer.getData('text');\r\n    if (!itemID || !status){\r\n        handleError(\"Missing item or status\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/changeStatus\", `${$(\"#clientCSRF\").serialize()}&itemID=${itemID}&status=${status}`, function() {\r\n        loadBoardItemsFromServer();\r\n    });\r\n\r\n    return false;\r\n};\r\n\r\n// Creates form to make a board item through JSX\r\nconst BoardItemForm = (props) => {\r\n    return (\r\n        <form id=\"boardItemForm\" \r\n            name=\"boardItemForm\"\r\n            onSubmit={handleBoardItem}\r\n            action=\"/board\"\r\n            method=\"POST\"\r\n            className=\"boardItemForm\"\r\n            >\r\n            <input id=\"boardItemName\" type=\"text\" name=\"name\" placeholder=\"Name\" />   \r\n            <input id=\"boardItemDescription\" type=\"text\" name=\"description\" placeholder=\"Description\" />\r\n            <input id=\"clientCSRF\" type=\"hidden\" name=\"_csrf\" value={props.csrf} />\r\n            <input className=\"makeBoardItemSubmit\" type=\"submit\" value=\"Make Item\" />\r\n        </form>\r\n    );\r\n};\r\n\r\n// Create a share button if this board can be shared\r\nconst ShareButton = (props) => {\r\n    if (props.shareable) {\r\n        return (\r\n            <a className=\"shareBoard\" href=\"/share\">Share</a>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n};\r\n\r\n// Creates sections for all of the items in a board based on their status through JSX\r\nconst BoardList = function(props) {\r\n    if (props.toDo.length === 0 && props.inProgress.length === 0 && props.complete.length === 0){\r\n        return (\r\n            <div className=\"boardItemList\">\r\n                <h3 className=\"emptyBoard\">No items yet</h3>\r\n            </div>\r\n        );\r\n    }\r\n    const toDoNodes = props.toDo.map(function(item) {\r\n        return (\r\n            <div key={item._id} className=\"item\" draggable=\"true\" onDragStart={(e) => handleDragStart(e, item._id)}>\r\n                <button className=\"deleteBoardItem\" onClick={(e) => deleteBoardItem(e, item._id)}></button>\r\n                <h3 className=\"itemName\">{item.name}</h3>\r\n                <p className=\"itemDescription\">{item.description}</p>\r\n            </div>\r\n        );\r\n    });\r\n    const inProgressNodes = props.inProgress.map(function(item) {\r\n        return (\r\n            <div key={item._id} className=\"item\" draggable=\"true\" onDragStart={(e) => handleDragStart(e, item._id)}>\r\n                <button className=\"deleteBoardItem\" onClick={(e) => deleteBoardItem(e, item._id)}></button>\r\n                <h3 className=\"itemName\">{item.name}</h3>\r\n                <p className=\"itemDescription\">{item.description}</p>\r\n            </div>\r\n        );\r\n    });\r\n    const completeNodes = props.complete.map(function(item) {\r\n        return (\r\n            <div key={item._id} className=\"item\" draggable=\"true\" onDragStart={(e) => handleDragStart(e, item._id)}>\r\n                <button className=\"deleteBoardItem\" onClick={(e) => deleteBoardItem(e, item._id)}></button>\r\n                <h3 className=\"itemName\">{item.name}</h3>\r\n                <p className=\"itemDescription\">{item.description}</p>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"boardItemList\">\r\n            <div id=\"toDo\" onDragOver={(e) => e.preventDefault()} onDrop={(e) => handleDrop(e, 'toDo')}>\r\n                <h2>To Do</h2>\r\n                {toDoNodes}\r\n            </div>\r\n            <div id=\"inProgress\" onDragOver={(e) => e.preventDefault()} onDrop={(e) => handleDrop(e, 'inProgress')}>\r\n                <h2>In Progress</h2>\r\n                {inProgressNodes}\r\n            </div>\r\n            <div id=\"complete\" onDragOver={(e) => e.preventDefault()} onDrop={(e) => handleDrop(e, 'complete')}>\r\n                <h2>Complete</h2>\r\n                {completeNodes}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Loads all items for the current board from the server and displays them.\r\nconst loadBoardItemsFromServer = () => {\r\n    sendAjax('GET', '/getBoardItems', null, (data) => {\r\n        const toDoArray = [];\r\n        const inProgressArray = [];\r\n        const completeArray = [];\r\n        for (let i = 0; i < data.boardItems.length; ++i) {\r\n            if (data.boardItems[i].status == \"toDo\"){\r\n                toDoArray.push(data.boardItems[i]);\r\n            }\r\n            else if (data.boardItems[i].status == \"inProgress\"){\r\n                inProgressArray.push(data.boardItems[i]);\r\n            }\r\n            else if (data.boardItems[i].status == \"complete\"){\r\n                completeArray.push(data.boardItems[i]);\r\n            }\r\n        }\r\n        ReactDOM.render(\r\n            <ShareButton shareable={data.shareable}  />, document.querySelector(\"#shareButton\")\r\n        );\r\n        ReactDOM.render(\r\n            <BoardList toDo={toDoArray} inProgress={inProgressArray} \r\n                complete={completeArray} />, document.querySelector(\"#boardItems\")\r\n        );\r\n        normalizeColHeights();\r\n    });\r\n};\r\n\r\n// Initializes the board page\r\nconst setup = function(csrf) {\r\n    ReactDOM.render(\r\n        <BoardItemForm csrf={csrf} />, document.querySelector(\"#makeBoardItem\")\r\n    );\r\n\r\n    ReactDOM.render(\r\n        <BoardList toDo={[]} inProgress={[]} complete={[]} />, \r\n            document.querySelector(\"#boardItems\")\r\n    );\r\n\r\n    $(\"#errorMessageWrapper\").click(function() {\r\n        $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    });\r\n\r\n    loadBoardItemsFromServer();\r\n};\r\n\r\n// Gets the CSRF token for the current user so it can be stored on the page\r\nconst getToken = () => {\r\n    sendAjax('GET', '/getToken', null, (result) => {\r\n        setup(result.csrfToken);\r\n    });\r\n};\r\n\r\n$(document).ready(function() {\r\n    getToken();\r\n})","// Handles displaying error messages\r\nconst handleError = (message) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\", () => {\r\n        $(\"#errorMessage\").text(message);\r\n        $(\"#errorMessageWrapper\").fadeIn(400, \"swing\");\r\n    });\r\n};\r\n\r\n// Redirects the user to the given location\r\nconst redirect = (response) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    window.location = response.redirect;\r\n}\r\n\r\n// Handles sending json ajax requests\r\nconst sendAjax = (type, action, data, success) => {\r\n    $.ajax({\r\n        cache: false,\r\n        type: type,\r\n        url: action,\r\n        data: data,\r\n        dataType: \"json\",\r\n        success: success,\r\n        error: function(xhr, status, error) {\r\n            var messageObj = JSON.parse(xhr.responseText);\r\n            handleError(messageObj.error);\r\n        }\r\n    });\r\n};"]}
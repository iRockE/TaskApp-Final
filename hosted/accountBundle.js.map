{"version":3,"sources":["account.js","helper.js"],"names":["handlePasswordChange","e","preventDefault","$","fadeOut","val","handleError","pRegex","RegExp","test","sendAjax","attr","serialize","redirect","AccountWindow","props","username","csrf","createContent","data","ReactDOM","render","document","querySelector","setup","click","getToken","result","csrfToken","ready","message","text","fadeIn","response","window","location","type","action","success","ajax","cache","url","dataType","error","xhr","status","messageObj","JSON","parse","responseText"],"mappings":"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","file":"accountBundle.js","sourcesContent":["// Handles sending password change request\r\nconst handlePasswordChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if ($(\"#oldPass\").val() == '' || $(\"#pass\").val() == '' || $(\"#pass2\").val() == '') {\r\n        handleError(\"All fields are required\");\r\n        return false;\r\n    }\r\n\r\n    let pRegex = new RegExp(\"^(?=.*[a-zA-Z])(?=.*[0-9])(?=.{6,})\");\r\n    if (!pRegex.test($(\"#pass\").val())) {\r\n        handleError(\"Password must be at least 6 characters with one letter and one number\");\r\n        return false;\r\n    }\r\n\r\n    if ($(\"#pass\").val() != $(\"#pass2\").val()) {\r\n        handleError(\"Passwords do not match\");\r\n        return false;\r\n    }\r\n\r\n    if ($(\"#oldPass\").val() == $(\"#pass\").val()) {\r\n        handleError(\"Old and new passwords cannot be the same\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', $(\"#passwordForm\").attr(\"action\"), $(\"#passwordForm\").serialize(), redirect);\r\n\r\n    return false;\r\n};\r\n\r\n// Creates form to change password through JSX\r\nconst AccountWindow = (props) => {\r\n    return (\r\n        <div id=\"accountPage\">\r\n            <div>\r\n                <h3>Username</h3>\r\n                <h4>{props.username}</h4>\r\n            </div>\r\n            <div id=\"accountForms\">\r\n                <h3>Change Password</h3>\r\n                <form id=\"passwordForm\" \r\n                    name=\"passwordForm\"\r\n                    onSubmit={handlePasswordChange}\r\n                    action=\"/changePassword\"\r\n                    method=\"POST\"\r\n                    className=\"passwordForm\"\r\n                    >\r\n                    <input id=\"oldPass\" type=\"password\" name=\"oldPass\" placeholder=\"Old Password\" />\r\n                    <input id=\"pass\" type=\"password\" name=\"pass\" placeholder=\"New Password\" />\r\n                    <input id=\"pass2\" type=\"password\" name=\"pass2\" placeholder=\"Retype Password\" />\r\n                    <input type=\"hidden\" name=\"_csrf\" value={props.csrf} />\r\n                    <input className=\"formSubmit\" type=\"submit\" value=\"Change Password\" />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Renders the account page content\r\nconst createContent = (csrf) => {\r\n    sendAjax('GET', '/getUsername', null, (data) => {\r\n        ReactDOM.render(\r\n            <AccountWindow csrf={csrf} username={data}/>,\r\n            document.querySelector(\"#content\")\r\n        );\r\n    });\r\n};\r\n\r\n// Initializes the account page\r\nconst setup = (csrf) => {\r\n    $(\"#errorMessageWrapper\").click(function() {\r\n        $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    });\r\n\r\n    createContent(csrf); // default view\r\n};\r\n\r\n// Gets the CSRF token for the current user so it can be stored on the page\r\nconst getToken = () => {\r\n    sendAjax('GET', '/getToken', null, (result) => {\r\n        setup(result.csrfToken);\r\n    });\r\n};\r\n\r\n$(document).ready(function() {\r\n    getToken();\r\n});","// Handles displaying error messages\r\nconst handleError = (message) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\", () => {\r\n        $(\"#errorMessage\").text(message);\r\n        $(\"#errorMessageWrapper\").fadeIn(400, \"swing\");\r\n    });\r\n};\r\n\r\n// Redirects the user to the given location\r\nconst redirect = (response) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    window.location = response.redirect;\r\n}\r\n\r\n// Handles sending json ajax requests\r\nconst sendAjax = (type, action, data, success) => {\r\n    $.ajax({\r\n        cache: false,\r\n        type: type,\r\n        url: action,\r\n        data: data,\r\n        dataType: \"json\",\r\n        success: success,\r\n        error: function(xhr, status, error) {\r\n            var messageObj = JSON.parse(xhr.responseText);\r\n            handleError(messageObj.error);\r\n        }\r\n    });\r\n};"]}
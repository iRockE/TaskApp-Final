{"version":3,"sources":["maker.js","helper.js"],"names":["handleBoard","e","preventDefault","$","fadeOut","val","handleError","sendAjax","attr","serialize","loadBoardsFromServer","loadBoard","boardID","redirect","deleteBoard","stopPropagation","BoardForm","props","csrf","BoardList","boards","length","boardNodes","map","board","_id","name","data","ReactDOM","render","document","querySelector","setup","click","getToken","result","csrfToken","ready","message","text","fadeIn","response","window","location","type","action","success","ajax","cache","url","dataType","error","xhr","status","messageObj","JSON","parse","responseText"],"mappings":"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","file":"appBundle.js","sourcesContent":["// Creates a new board\r\nconst handleBoard = (e) => {\r\n    e.preventDefault();\r\n\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if($(\"#boardName\").val() == ''){\r\n        handleError(\"Board name required\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', $(\"#boardForm\").attr(\"action\"), $(\"#boardForm\").serialize(), function() {\r\n        loadBoardsFromServer();\r\n    });\r\n\r\n    return false;\r\n};\r\n\r\n// Loads an individual board's page\r\nconst loadBoard = (e, boardID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    if($(\"#boardID\").val() == ''){\r\n        handleError(\"Board does not exist\");\r\n        return false;\r\n    }\r\n    sendAjax('POST', \"/loadBoard\", `${$(\"#clientCSRF\").serialize()}&boardID=${boardID}`, redirect);\r\n    return false;\r\n};\r\n\r\n// Deletes a board\r\nconst deleteBoard = (e, boardID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if($(\"#boardID\").val() == ''){\r\n        handleError(\"Board does not exist\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/deleteBoard\", `${$(\"#clientCSRF\").serialize()}&boardID=${boardID}`, function() {\r\n        loadBoardsFromServer();\r\n    });\r\n    e.stopPropagation();\r\n    return false;\r\n};\r\n\r\n// Makes a board creation form through JSX\r\nconst BoardForm = (props) => {\r\n    return (\r\n        <form id=\"boardForm\" \r\n            name=\"boardForm\"\r\n            onSubmit={handleBoard}\r\n            action=\"/boards\"\r\n            method=\"POST\"\r\n            className=\"boardForm\"\r\n            >\r\n            <input id=\"boardName\" type=\"text\" name=\"name\" placeholder=\"Project Name\" />    \r\n            <input id=\"clientCSRF\" type=\"hidden\" name=\"_csrf\" value={props.csrf} />\r\n            <input className=\"makeBoardSubmit\" type=\"submit\" value=\"Make Board\" />\r\n        </form>\r\n    );\r\n};\r\n\r\n// Makes a list of boards through JSX\r\nconst BoardList = function(props) {\r\n    if (props.boards.length === 0){\r\n        return (\r\n            <div className=\"boardList\">\r\n                <h3 className=\"emptyBoard\">No boards yet</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const boardNodes = props.boards.map(function(board) {\r\n        return (\r\n            <div key={board._id} className=\"board\" onClick={(e) => loadBoard(e, board._id)}>\r\n                <button className=\"deleteBoard\" onClick={(e) => deleteBoard(e, board._id)}></button>\r\n                <h3 className=\"boardName\">{board.name}</h3>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"boardList\">\r\n            {boardNodes}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Loads the boards from the server so that they may be displayed\r\nconst loadBoardsFromServer = () => {\r\n    sendAjax('GET', '/getBoards', null, (data) => {\r\n        ReactDOM.render(\r\n            <BoardList boards={data.boards} />, document.querySelector(\"#boards\")\r\n        );\r\n    });\r\n};\r\n\r\n// Initializes the board page\r\nconst setup = function(csrf) {\r\n    ReactDOM.render(\r\n        <BoardForm csrf={csrf} />, document.querySelector(\"#makeBoard\")\r\n    );\r\n\r\n    ReactDOM.render(\r\n        <BoardList boards={[]} />, document.querySelector(\"#boards\")\r\n    );\r\n    \r\n    $(\"#errorMessageWrapper\").click(function() {\r\n        $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    });\r\n\r\n    loadBoardsFromServer();\r\n};\r\n\r\n// Gets the CSRF token for the current user so it can be stored on the page\r\nconst getToken = () => {\r\n    sendAjax('GET', '/getToken', null, (result) => {\r\n        setup(result.csrfToken);\r\n    });\r\n};\r\n\r\n$(document).ready(function() {\r\n    getToken();\r\n})","// Handles displaying error messages\r\nconst handleError = (message) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\", () => {\r\n        $(\"#errorMessage\").text(message);\r\n        $(\"#errorMessageWrapper\").fadeIn(400, \"swing\");\r\n    });\r\n};\r\n\r\n// Redirects the user to the given location\r\nconst redirect = (response) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    window.location = response.redirect;\r\n}\r\n\r\n// Handles sending json ajax requests\r\nconst sendAjax = (type, action, data, success) => {\r\n    $.ajax({\r\n        cache: false,\r\n        type: type,\r\n        url: action,\r\n        data: data,\r\n        dataType: \"json\",\r\n        success: success,\r\n        error: function(xhr, status, error) {\r\n            var messageObj = JSON.parse(xhr.responseText);\r\n            handleError(messageObj.error);\r\n        }\r\n    });\r\n};"]}
"use strict";// Share the current board with a friend
var shareFriend=function shareFriend(e,friendID){$("#errorMessageWrapper").fadeOut(400,"swing");if(!friendID){handleError("Friend does not exist");return false}sendAjax("POST","/shareFriend",$("#clientCSRF").serialize()+"&friendID="+friendID,function(){loadFriendsFromServer()});e.stopPropagation();return false};// Unshare the current board with a friend
var unshareFriend=function unshareFriend(e,friendID){$("#errorMessageWrapper").fadeOut(400,"swing");if(!friendID){handleError("Friend does not exist");return false}sendAjax("POST","/unshareFriend",$("#clientCSRF").serialize()+"&friendID="+friendID,function(){loadFriendsFromServer()});e.stopPropagation();return false};// Makes a list of friends through JSX
var FriendListShared=function FriendListShared(props){if(props.friends.length===0){return React.createElement("div",{className:"friendList"},React.createElement("h3",{className:"emptyFriends"},"No shares yet. Click on a friend to share this board!"))}var friendNodes=props.friends.map(function(friend){return React.createElement("div",{key:friend._id,className:"friend",onClick:function onClick(e){return unshareFriend(e,friend._id)}},React.createElement("h3",{className:"friendName"},friend.username))});return React.createElement("div",{className:"friendList"},friendNodes)};// Makes a list of friends through JSX
var FriendList=function FriendList(props){if(props.friends.length===0){return React.createElement("div",{className:"friendList"},React.createElement("h3",{className:"emptyFriends"},"No friends to share with"))}var friendNodes=props.friends.map(function(friend){return React.createElement("div",{key:friend._id,className:"friend",onClick:function onClick(e){return shareFriend(e,friend._id)}},React.createElement("h3",{className:"friendName"},friend.username))});return React.createElement("div",{className:"friendList"},friendNodes)};// Makes a list of friends through JSX
var FieldCSRF=function FieldCSRF(props){return React.createElement("div",null,React.createElement("input",{id:"clientCSRF",type:"hidden",name:"_csrf",value:props.csrf}))};// Loads the friends from the server so that they may be displayed
var loadFriendsFromServer=function loadFriendsFromServer(){sendAjax("GET","/getShared",null,function(data){ReactDOM.render(React.createElement(FriendListShared,{friends:data.sharedFriends}),document.querySelector("#sharedFriends"));ReactDOM.render(React.createElement(FriendList,{friends:data.unsharedFriends}),document.querySelector("#unsharedFriends"))})};// Initializes the friends page
var setup=function setup(csrf){ReactDOM.render(React.createElement(FieldCSRF,{csrf:csrf}),document.querySelector("#csrfContainer"));$("#errorMessageWrapper").click(function(){$("#errorMessageWrapper").fadeOut(400,"swing")});loadFriendsFromServer()};// Gets the CSRF token for the current user so it can be stored on the page
var getToken=function getToken(){sendAjax("GET","/getToken",null,function(result){setup(result.csrfToken)})};$(document).ready(function(){getToken()});// Handles displaying error messages
var handleError=function handleError(message){$("#errorMessageWrapper").fadeOut(400,"swing",function(){$("#errorMessage").text(message);$("#errorMessageWrapper").fadeIn(400,"swing")})};// Redirects the user to the given location
var redirect=function redirect(response){$("#errorMessageWrapper").fadeOut(400,"swing");window.location=response.redirect};// Handles sending json ajax requests
var sendAjax=function sendAjax(type,action,data,success){$.ajax({cache:false,type:type,url:action,data:data,dataType:"json",success:success,error:function error(xhr,status,_error){var messageObj=JSON.parse(xhr.responseText);handleError(messageObj.error)}})};
//# sourceMappingURL=shareBundle.js.map

{"version":3,"sources":["share.js","helper.js"],"names":["shareFriend","e","friendID","$","fadeOut","handleError","sendAjax","serialize","loadFriendsFromServer","stopPropagation","unshareFriend","FriendListShared","props","friends","length","friendNodes","map","friend","_id","username","FriendList","FieldCSRF","csrf","data","ReactDOM","render","sharedFriends","document","querySelector","unsharedFriends","setup","click","getToken","result","csrfToken","ready","message","text","fadeIn","redirect","response","window","location","type","action","success","ajax","cache","url","dataType","error","xhr","status","messageObj","JSON","parse","responseText"],"mappings":"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","file":"shareBundle.js","sourcesContent":["// Share the current board with a friend\r\nconst shareFriend = (e, friendID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if (!friendID){\r\n        handleError(\"Friend does not exist\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/shareFriend\", `${$(\"#clientCSRF\").serialize()}&friendID=${friendID}`, function() {\r\n        loadFriendsFromServer();\r\n    });\r\n    e.stopPropagation();\r\n    return false;\r\n};\r\n\r\n// Unshare the current board with a friend\r\nconst unshareFriend = (e, friendID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if (!friendID){\r\n        handleError(\"Friend does not exist\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/unshareFriend\", `${$(\"#clientCSRF\").serialize()}&friendID=${friendID}`, function() {\r\n        loadFriendsFromServer();\r\n    });\r\n    e.stopPropagation();\r\n    return false;\r\n};\r\n\r\n// Makes a list of friends through JSX\r\nconst FriendListShared = function(props) {\r\n    if (props.friends.length === 0){\r\n        return (\r\n            <div className=\"friendList\">\r\n                <h3 className=\"emptyFriends\">No shares yet. Click on a friend to share this board!</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const friendNodes = props.friends.map(function(friend) {\r\n        return (\r\n            <div key={friend._id} className=\"friend\" onClick={(e) => unshareFriend(e, friend._id)}>\r\n                <h3 className=\"friendName\">{friend.username}</h3>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"friendList\">\r\n            {friendNodes}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Makes a list of friends through JSX\r\nconst FriendList = function(props) {\r\n    if (props.friends.length === 0){\r\n        return (\r\n            <div className=\"friendList\">\r\n                <h3 className=\"emptyFriends\">No friends to share with</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const friendNodes = props.friends.map(function(friend) {\r\n        return (\r\n            <div key={friend._id} className=\"friend\" onClick={(e) => shareFriend(e, friend._id)}>\r\n                <h3 className=\"friendName\">{friend.username}</h3>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"friendList\">\r\n            {friendNodes}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Makes a list of friends through JSX\r\nconst FieldCSRF = function(props) {\r\n    return (\r\n        <div>\r\n            <input id=\"clientCSRF\" type=\"hidden\" name=\"_csrf\" value={props.csrf} />\r\n        </div>\r\n    );\r\n};\r\n\r\n// Loads the friends from the server so that they may be displayed\r\nconst loadFriendsFromServer = () => {\r\n    sendAjax('GET', '/getShared', null, (data) => {\r\n        ReactDOM.render(\r\n            <FriendListShared friends={data.sharedFriends} />, document.querySelector(\"#sharedFriends\")\r\n        );\r\n        ReactDOM.render(\r\n            <FriendList friends={data.unsharedFriends} />, document.querySelector(\"#unsharedFriends\")\r\n        );\r\n    });\r\n};\r\n\r\n// Initializes the friends page\r\nconst setup = function(csrf) {\r\n    ReactDOM.render(\r\n        <FieldCSRF csrf={csrf} />, document.querySelector(\"#csrfContainer\")\r\n    );\r\n\r\n    $(\"#errorMessageWrapper\").click(function() {\r\n        $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    });\r\n\r\n    loadFriendsFromServer();\r\n};\r\n\r\n// Gets the CSRF token for the current user so it can be stored on the page\r\nconst getToken = () => {\r\n    sendAjax('GET', '/getToken', null, (result) => {\r\n        setup(result.csrfToken);\r\n    });\r\n};\r\n\r\n$(document).ready(function() {\r\n    getToken();\r\n})","// Handles displaying error messages\r\nconst handleError = (message) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\", () => {\r\n        $(\"#errorMessage\").text(message);\r\n        $(\"#errorMessageWrapper\").fadeIn(400, \"swing\");\r\n    });\r\n};\r\n\r\n// Redirects the user to the given location\r\nconst redirect = (response) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    window.location = response.redirect;\r\n}\r\n\r\n// Handles sending json ajax requests\r\nconst sendAjax = (type, action, data, success) => {\r\n    $.ajax({\r\n        cache: false,\r\n        type: type,\r\n        url: action,\r\n        data: data,\r\n        dataType: \"json\",\r\n        success: success,\r\n        error: function(xhr, status, error) {\r\n            var messageObj = JSON.parse(xhr.responseText);\r\n            handleError(messageObj.error);\r\n        }\r\n    });\r\n};"]}
{"version":3,"sources":["friends.js","helper.js"],"names":["addFriend","e","preventDefault","$","fadeOut","val","handleError","sendAjax","attr","serialize","loadFriendsFromServer","removeFriend","friendID","stopPropagation","FriendForm","props","csrf","FriendList","friends","length","friendNodes","map","friend","_id","username","data","ReactDOM","render","document","querySelector","setup","click","getToken","result","csrfToken","ready","message","text","fadeIn","redirect","response","window","location","type","action","success","ajax","cache","url","dataType","error","xhr","status","messageObj","JSON","parse","responseText"],"mappings":"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","file":"friendsBundle.js","sourcesContent":["// add a new friend\r\nconst addFriend = (e) => {\r\n    e.preventDefault();\r\n\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if($(\"#friendName\").val() == ''){\r\n        handleError(\"Friend username required\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', $(\"#friendForm\").attr(\"action\"), $(\"#friendForm\").serialize(), function() {\r\n        loadFriendsFromServer();\r\n    });\r\n\r\n    return false;\r\n};\r\n\r\n// Remove a friend\r\nconst removeFriend = (e, friendID) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n\r\n    if (!friendID){\r\n        handleError(\"Friend does not exist\");\r\n        return false;\r\n    }\r\n\r\n    sendAjax('POST', \"/removeFriend\", `${$(\"#clientCSRF\").serialize()}&friendID=${friendID}`, function() {\r\n        loadFriendsFromServer();\r\n    });\r\n    e.stopPropagation();\r\n    return false;\r\n};\r\n\r\n// Makes a friend creation form through JSX\r\nconst FriendForm = (props) => {\r\n    return (\r\n        <form id=\"friendForm\" \r\n            name=\"friendForm\"\r\n            onSubmit={addFriend}\r\n            action=\"/friends\"\r\n            method=\"POST\"\r\n            className=\"friendForm\"\r\n            >\r\n            <input id=\"friendName\" type=\"text\" name=\"name\" placeholder=\"Friend's Username\" />    \r\n            <input id=\"clientCSRF\" type=\"hidden\" name=\"_csrf\" value={props.csrf} />\r\n            <input className=\"addFriendSubmit\" type=\"submit\" value=\"Add Friend\" />\r\n        </form>\r\n    );\r\n};\r\n\r\n// Makes a list of friends through JSX\r\nconst FriendList = function(props) {\r\n    if (props.friends.length === 0){\r\n        return (\r\n            <div className=\"friendList\">\r\n                <h3 className=\"emptyFriends\">No friends yet</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const friendNodes = props.friends.map(function(friend) {\r\n        return (\r\n            <div key={friend._id} className=\"friend\">\r\n                <button className=\"removeFriend\" onClick={(e) => removeFriend(e, friend._id)}></button>\r\n                <h3 className=\"friendName\">{friend.username}</h3>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"friendList\">\r\n            {friendNodes}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Loads the friends from the server so that they may be displayed\r\nconst loadFriendsFromServer = () => {\r\n    sendAjax('GET', '/getFriends', null, (data) => {\r\n        ReactDOM.render(\r\n            <FriendList friends={data.friends} />, document.querySelector(\"#friends\")\r\n        );\r\n    });\r\n};\r\n\r\n// Initializes the friends page\r\nconst setup = function(csrf) {\r\n    ReactDOM.render(\r\n        <FriendForm csrf={csrf} />, document.querySelector(\"#addFriend\")\r\n    );\r\n\r\n    ReactDOM.render(\r\n        <FriendList friends={[]} />, document.querySelector(\"#friends\")\r\n    );\r\n    \r\n    $(\"#errorMessageWrapper\").click(function() {\r\n        $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    });\r\n\r\n    loadFriendsFromServer();\r\n};\r\n\r\n// Gets the CSRF token for the current user so it can be stored on the page\r\nconst getToken = () => {\r\n    sendAjax('GET', '/getToken', null, (result) => {\r\n        setup(result.csrfToken);\r\n    });\r\n};\r\n\r\n$(document).ready(function() {\r\n    getToken();\r\n})","// Handles displaying error messages\r\nconst handleError = (message) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\", () => {\r\n        $(\"#errorMessage\").text(message);\r\n        $(\"#errorMessageWrapper\").fadeIn(400, \"swing\");\r\n    });\r\n};\r\n\r\n// Redirects the user to the given location\r\nconst redirect = (response) => {\r\n    $(\"#errorMessageWrapper\").fadeOut(400, \"swing\");\r\n    window.location = response.redirect;\r\n}\r\n\r\n// Handles sending json ajax requests\r\nconst sendAjax = (type, action, data, success) => {\r\n    $.ajax({\r\n        cache: false,\r\n        type: type,\r\n        url: action,\r\n        data: data,\r\n        dataType: \"json\",\r\n        success: success,\r\n        error: function(xhr, status, error) {\r\n            var messageObj = JSON.parse(xhr.responseText);\r\n            handleError(messageObj.error);\r\n        }\r\n    });\r\n};"]}